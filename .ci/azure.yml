parameters:
  conanLoginUsername: ""
  conanPassword: ""
  conanOptions: ""
  conanArchs: ""
  conanVersion: ""
  pythonVersion: "3.7.6"
  linuxGCCVersion: "7"
  vsVersions: "14,15,16"  # Possible values: any combination of 14, 15, 16 or empty ("")
  appleClangVersions: ""  # Possible values: "10", "" (for no Apple Clang build jobs)
  splitByBuildTypes: "false"  # Possible values: "false", "true"
  requireMoreDiskSpace: "false" # Possible values: "false", "true" - Deletes the entire Java stack for Windows images

jobs:
- ${{ if ne(parameters.linuxGCCVersion, '') }}:
  - job: Linux
    pool:
      vmImage: $(AZP_BUILD_WORKER_IMAGE)
    timeoutInMinutes: 120
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: ${{ parameters.pythonVersion }}
    - script: |
        pip install --upgrade pip cmake
        python --version
        pip --version
        which cmake
        cmake --version
        pip install bincrafters_package_tools
        conan user
      displayName: Install Conan
    - script: |
        python build.py
      env:
        CONAN_LOGIN_USERNAME: ${{ parameters.conanLoginUsername }}
        CONAN_PASSWORD: ${{ parameters.conanPassword }}
        ${{ if ne(parameters.conanOptions, '') }}:
          CONAN_OPTIONS: ${{ parameters.conanOptions }}
        ${{ if ne(parameters.conanArchs, '') }}:
          CONAN_ARCHS: ${{ parameters.conanArchs }}
        ${{ if ne(parameters.conanVersion, '') }}:
          CONAN_VERSION: ${{ parameters.conanVersion }}
      displayName: Run

    strategy:
      matrix:
        ${{ if eq(parameters.splitByBuildTypes, 'true') }}:
          ${{ if contains(parameters.linuxGCCVersion, 7) }}:
            GCC 7 Release:
              AZP_BUILD_WORKER_IMAGE: "Ubuntu 16.04"
              CONAN_GCC_VERSIONS: 7
              CONAN_BUILD_TYPES: Release
            GCC 7 Debug:
              AZP_BUILD_WORKER_IMAGE: "Ubuntu 16.04"
              CONAN_GCC_VERSIONS: 7
              CONAN_BUILD_TYPES: Debug
        ${{ if ne(parameters.splitByBuildTypes, 'true') }}:
          ${{ if contains(parameters.linuxGCCVersion, 7) }}:
            GCC 7:
              AZP_BUILD_WORKER_IMAGE: "Ubuntu 16.04"
              CONAN_GCC_VERSIONS: 7

- ${{ if ne(parameters.appleClangVersions, '') }}:
  - job: macOS
    pool:
      vmImage: $(AZP_BUILD_WORKER_IMAGE)
    timeoutInMinutes: 120
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: ${{ parameters.pythonVersion }}
    - script: |
        pip install --upgrade pip cmake
        python --version
        pip --version
        which cmake
        cmake --version
        pip install bincrafters_package_tools
        conan user
      displayName: Install Conan
    - script: |
        python build.py
      env:
        CONAN_LOGIN_USERNAME: ${{ parameters.conanLoginUsername }}
        CONAN_PASSWORD: ${{ parameters.conanPassword }}
        ${{ if ne(parameters.conanOptions, '') }}:
          CONAN_OPTIONS: ${{ parameters.conanOptions }}
        ${{ if ne(parameters.conanArchs, '') }}:
          CONAN_ARCHS: ${{ parameters.conanArchs }}
        ${{ if ne(parameters.conanVersion, '') }}:
          CONAN_VERSION: ${{ parameters.conanVersion }}
      displayName: Run
    
    strategy:
      matrix:
        ${{ if eq(parameters.splitByBuildTypes, 'true') }}:
          ${{ if contains(parameters.appleClangVersions, 10) }}:
            Apple-Clang 10 Release:
              AZP_BUILD_WORKER_IMAGE: macOS-10.13
              CONAN_APPLE_CLANG_VERSIONS: 10.0
              CONAN_BUILD_TYPES: Release
            Apple-Clang 10 Debug:
              AZP_BUILD_WORKER_IMAGE: macOS-10.13
              CONAN_APPLE_CLANG_VERSIONS: 10.0
              CONAN_BUILD_TYPES: Debug
        ${{ if ne(parameters.splitByBuildTypes, 'true') }}:
          ${{ if contains(parameters.appleClangVersions, 10) }}:
            Apple-Clang 10:
              AZP_BUILD_WORKER_IMAGE: macOS-10.13
              CONAN_APPLE_CLANG_VERSIONS: 10.0

- ${{ if ne(parameters.vsVersions, '') }}:
  - job: Windows
    pool:
      vmImage: $(AZP_BUILD_WORKER_IMAGE)
    timeoutInMinutes: 180
    steps:
    - task: UsePythonVersion@0
      condition: ne(variables.CONAN_VISUAL_VERSIONS, 14)
      inputs:
        versionSpec: ${{ parameters.pythonVersion }}
    - task: PowerShell@2
      condition: eq(variables.CONAN_VISUAL_VERSIONS, 14)
      inputs:
        targetType: inline
        script: |
          Invoke-WebRequest https://aka.ms/nugetclidl -OutFile C:\nuget.exe
          C:\nuget.exe install python -Version ${{ parameters.pythonVersion }} -ExcludeVersion -OutputDirectory C:\
          Invoke-WebRequest -OutFile get-pip.py https://bootstrap.pypa.io/get-pip.py
          C:\python\tools\python.exe get-pip.py
          Write-Host "##vso[task.prependpath]C:\python\tools"
          Write-Host "##vso[task.prependpath]C:\python\tools\Scripts"
          Remove-Item C:\nuget.exe
          Remove-Item get-pip.py
      displayName: UsePythonVersion for VS 2015
    - powershell: |
        $delete = $(
          Start-Process -PassThru -NoNewWindow cmd.exe '/c rmdir /S /Q "C:\ProgramData\chocolatey"';
          Start-Process -PassThru -NoNewWindow cmd.exe '/c rmdir /S /Q "C:\Strawberry\"';
          Start-Process -PassThru -NoNewWindow cmd.exe '/c rmdir /S /Q "C:\Program Files (x86)\CMake\bin"';
          Start-Process -PassThru -NoNewWindow cmd.exe '/c rmdir /S /Q "C:\Program Files\CMake\bin"';
          Start-Process -PassThru -NoNewWindow cmd.exe '/c del /S /Q "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"';
          Start-Process -PassThru -NoNewWindow cmd.exe '/c del /S /Q "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"';
        )
        $delete | Wait-Process
        python -m pip install --upgrade pip
        pip install --upgrade cmake
        if ($env:CONAN_VISUAL_VERSIONS -eq 15) {
          New-Item -ItemType SymbolicLink -Path "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" `
          -Target (get-command cmake).Path
        }
        if ($env:CONAN_VISUAL_VERSIONS -eq 16) {
          New-Item -ItemType SymbolicLink -Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" `
          -Target (get-command cmake).Path
        }
        python --version
        pip --version
        echo (get-command cmake).Path
        cmake --version
        pip install bincrafters_package_tools
        Start-Process -Wait -NoNewWindow cmd.exe '/c conan user'
      displayName: Install Conan
    - powershell: |
        if (($env:CONAN_VISUAL_VERSIONS -eq 14) -And ('${{ parameters.requireMoreDiskSpace }}' -eq 'true')) {
          Write-Host "requireMoreDiskSpace is True - Delete Java stack for more disk space"
          Start-Process -NoNewWindow cmd.exe "/c (del /f/s/q C:\java\ > nul) && (rmdir /S /Q C:\java\)" 
        }
        if (($env:CONAN_VISUAL_VERSIONS -ne 14) -And ('${{ parameters.requireMoreDiskSpace }}' -eq 'true')) {
          Write-Host "requireMoreDiskSpace is True - Delete Java stack for more disk space"
          Start-Process -NoNewWindow cmd.exe '/c (del /f/s/q "C:\Program Files\Java" > nul) && (rmdir /S /Q "C:\Program Files\Java")'
          Start-Process -NoNewWindow cmd.exe '/c (del /f/s/q "C:\Program Files\dotnet\sdk\" > nul) && (rmdir /S /Q "C:\Program Files\dotnet\sdk\")' 
        }
        python build.py
      env:
        CONAN_LOGIN_USERNAME: ${{ parameters.conanLoginUsername }}
        CONAN_PASSWORD: ${{ parameters.conanPassword }}
        ${{ if ne(parameters.conanOptions, '') }}:
          CONAN_OPTIONS: ${{ parameters.conanOptions }}
        ${{ if ne(parameters.conanArchs, '') }}:
          CONAN_ARCHS: ${{ parameters.conanArchs }}
        ${{ if ne(parameters.conanVersion, '') }}:
          CONAN_VERSION: ${{ parameters.conanVersion }}
      displayName: Run

    strategy:
      matrix:
        ${{ if eq(parameters.splitByBuildTypes, 'true') }}:
          ${{ if contains(parameters.vsVersions, 14) }}:
            VS 2015 Release:
              AZP_BUILD_WORKER_IMAGE: vs2015-win2012r2
              CONAN_VISUAL_VERSIONS: 14
              CONAN_BUILD_TYPES: Release
            VS 2015 Debug:
              AZP_BUILD_WORKER_IMAGE: vs2015-win2012r2
              CONAN_VISUAL_VERSIONS: 14
              CONAN_BUILD_TYPES: Debug
          ${{ if contains(parameters.vsVersions, 15) }}:
            VS 2017 Release:
              AZP_BUILD_WORKER_IMAGE: vs2017-win2016
              CONAN_VISUAL_VERSIONS: 15
              CONAN_BUILD_TYPES: Release
            VS 2017 Debug:
              AZP_BUILD_WORKER_IMAGE: vs2017-win2016
              CONAN_VISUAL_VERSIONS: 15
              CONAN_BUILD_TYPES: Debug
          ${{ if contains(parameters.vsVersions, 16) }}:
            VS 2019 Release:
              AZP_BUILD_WORKER_IMAGE: windows-2019
              CONAN_VISUAL_VERSIONS: 16
              CONAN_BUILD_TYPES: Release
            VS 2019 Debug:
              AZP_BUILD_WORKER_IMAGE: windows-2019
              CONAN_VISUAL_VERSIONS: 16
              CONAN_BUILD_TYPES: Debug
        ${{ if ne(parameters.splitByBuildTypes, 'true') }}:
          ${{ if contains(parameters.vsVersions, 14) }}:
            VS 2015:
              AZP_BUILD_WORKER_IMAGE: vs2015-win2012r2
              CONAN_VISUAL_VERSIONS: 14
          ${{ if contains(parameters.vsVersions, 15) }}:
            VS 2017:
              AZP_BUILD_WORKER_IMAGE: vs2017-win2016
              CONAN_VISUAL_VERSIONS: 15
          ${{ if contains(parameters.vsVersions, 16) }}:
            VS 2019:
              AZP_BUILD_WORKER_IMAGE: windows-2019
              CONAN_VISUAL_VERSIONS: 16
